## Snakemake - GBS_pipeline
##
## @RAVEL-Sebastien
##

import glob
import re, sys
from pathlib import Path
from script.module import parse_idxstats

# 1=atropos
# 2=fastqc
# 3=bwaAln
# 4=bwaSampe
# 5=picardToolsSortSam
# 6=samtoolsflagstat
# 7=samtoolsview
# 8=samToolsIndex
# 9=gatkRealignerTargetCreator
# 10=gatkIndelRealigner
# 11=picardToolsMarkDuplicates
# 1000=gatkUnifiedGenotyper


###############################################################################
# NOTE pas de caractere speciaux entre 2 wildcards

# --- Importing Configuration Files --- #
configfile: 'config.yaml'
paired_data = False

# dir and suffix
samples_dir = config["DATA"]["directories"]["samples_dir"]
references_dir =  config["DATA"]["directories"]["reference_dir"]
out_dir = config["DATA"]["directories"]["out_dir"]

# pipeline options
# plotOption = config["PIPE_OPTION"]["plotOption"]
# size_min = config["PIPE_OPTION"]["size_min"]
# size_max = config["PIPE_OPTION"]["size_max"]

# to lunch separator
sep="#"


#*###############################################################################
# def finalReturn(wildcards):
	# if plotOption:
		# toto = expand(out_dir+'6_plot_graph_merge/{samples}_{references}_merge.png', samples = SAMPLES, references = REFERENCES)
		# toto.append(out_dir+'4_merges_resume_files/all_Resume.csv')
		# return toto
	# else:
		# return [out_dir+'4_merges_resume_files/all_Resume.csv']

#*###############################################################################
for path in ["cleanning"]:
	Path(f"{out_dir}/LOG/{path}/").resolve().mkdir(parents=True, exist_ok=True)

#*###############################################################################
SAMPLES, = glob_wildcards(samples_dir+"{samples}_R1.fastq.gz", followlinks=True)
REFERENCES, = glob_wildcards(references_dir+"{references}.fasta", followlinks=True)

# Auto check if data is paired with flag _R2
SAMPLES_PAIRED = []
SAMPLES_SINGLE = []
for sample in SAMPLES:
	if Path(f"{samples_dir}{sample}_R2.fastq.gz").exists():
		SAMPLES_PAIRED.append(sample)
	else:
		SAMPLES_SINGLE.append(sample)

# print(f"SAMPLES_SINGLE: {SAMPLES_SINGLE}")
# print(f"SAMPLES_PAIRED: {SAMPLES_PAIRED}")
# # exit()

# --- Main Build Rules --- #
rule final:
	"""construct a table of all resume files"""
	input:
		# expand(out_dir+'1_mapping/paired/{samples}.bam', samples = SAMPLES_PAIRED),
		# expand(out_dir+'1_mapping/single/{samples}.bam', samples = SAMPLES_SINGLE)
		# expand(out_dir+'1_mapping/all/{samples}_IDXSTATS.txt', samples = SAMPLES),
		expand(out_dir+'1_mapping/paired/{references}-ref/{samples}_DEPTH.txt', samples = SAMPLES, references = REFERENCES),
		out_dir+'2_merges_resume_files/all_mapping_stats_resume.csv'


# 0 index of genome file
rule bwa_index:
	"""make index with bwa for reference file"""
	threads: 1
	input: 	fasta = references_dir+"{references}.fasta"
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog =  out_dir+'/LOG/0_INDEX_{references}_bwaindex.e',
			outputLog = out_dir+'/LOG/0_INDEX_{references}_bwaindex.o'
	output: sa_file = references_dir+"{references}.fasta.sa"
	message: """Execute BWA INDEX for
		Input:
			- Fasta : {input.fasta}
			- Threads : {threads}
			"""+f"\n{sep*108}"
	shell: config["MODULES"]["BWA"]+"""
		bwa index {input.fasta}
	"""

# 1=atropos PE
rule run_atropos_PE:
	"""Run atropos for cleanning data"""
	threads: 5
	input: 	pe1 = samples_dir+'{samples}_R1.fastq.gz',
			pe2 = samples_dir+'{samples}_R2.fastq.gz'
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog =  out_dir+'LOG/0_ATROPOS_{samples}.e',
			outputLog = out_dir+'LOG/0_ATROPOS_{samples}.o'
	output: R1 = out_dir+'0_cleanning/paired/{samples}_R1.ATROPOS.fastq.gz',
			R2 = out_dir+'0_cleanning/paired/{samples}_R2.ATROPOS.fastq.gz'
	message: """Execute atropos for
		Input:
			- Fastq : {input}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["ATROPOS"]+"""
		atropos --threads {threads} """+config["PARAMSTOOLS"]["ATROPOSPE"]+""" -o {output.R1} -p {output.R2} -pe1 {input.pe1} -pe2 {input.pe2}
	"""


# 2=fastqc
rule run_fastqc_PE:
	"""Run fastqc for controle data"""
	threads: 2
	input: 	R1 = out_dir+'0_cleanning/paired/{samples}_R1.ATROPOS.fastq.gz',
			R2 = out_dir+'0_cleanning/paired/{samples}_R2.ATROPOS.fastq.gz'
	params: l_mem_free='2G',
			queue="normal.q",
			errorLog =  out_dir+'LOG/0_FASTQC_{samples}.e',
			outputLog = out_dir+'LOG/0_FASTQC_{samples}.o'
	output: R1 = out_dir+'0_cleanning/paired/{samples}_R1.ATROPOS_fastqc.html',
			R2 = out_dir+'0_cleanning/paired/{samples}_R2.ATROPOS_fastqc.html'
	message: """Execute fastqc for
		Input:
			- Fastq : {input}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["FASTQC"]+"""
		fastqc -t {threads} {input.R1} {input.R2}
	"""

# 3=bwaAln
rule run_bwa_aln_PE:
	"""make bwa aln for all samples PE on all reference"""
	threads: 6
	input: 	fasta = references_dir+"{references}.fasta",
			index = references_dir+"{references}.fasta.sa",
			R1 = out_dir+'0_cleanning/paired/{samples}_R1.ATROPOS.fastq.gz',
			R2 = out_dir+'0_cleanning/paired/{samples}_R2.ATROPOS.fastq.gz'
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog = out_dir+'LOG/1_mapping_{references}_{samples}_bwaaln.e',
			outputLog = out_dir+'LOG/1_mapping_{references}_{samples}_bwaaln.o'
	output: sai_R1 = temp(out_dir+'1_mapping/paired/{references}-ref/{samples}_R1.BWAALN.sai'),
			sai_R2 = temp(out_dir+'1_mapping/paired/{references}-ref/{samples}_R2.BWAALN.sai')
	message: """Execute BWA ALN for
		Input:
			- Fasta : {input.fasta}
			- Fastq : {input.R1} {input.R2}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["BWA"]+"""
		bwa aln -t {threads} -n 2 -f {output.sai_R1} {input.fasta} {input.R1} &&
		bwa aln -t {threads} -n 2 -f {output.sai_R2} {input.fasta} {input.R2}
	"""


rule bwa_sampe_sort_bam:
	"""make bwa sampe for all samples PE on reference"""
	threads: 6
	input: 	fasta = references_dir+"{references}.fasta",
			index = references_dir+"{references}.fasta.sa",
			R1 = out_dir+'0_cleanning/paired/{samples}_R1.ATROPOS.fastq.gz',
			R2 = out_dir+'0_cleanning/paired/{samples}_R2.ATROPOS.fastq.gz',
			sai_R1 = out_dir+'1_mapping/paired/{references}-ref/{samples}_R1.BWAALN.sai',
			sai_R2 = out_dir+'1_mapping/paired/{references}-ref/{samples}_R2.BWAALN.sai'
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog = out_dir+'LOG/1_mapping_{references}_{samples}_bwasampe.e',
			outputLog = out_dir+'LOG/1_mapping_{references}_{samples}_bwasampe.o',
			rg = "{samples}"
	output: bam_file = out_dir+'1_mapping/paired/{references}-ref/{samples}.bam'
	message: """Execute BWA SAMPE for
		Input:
			- Fasta : {input.fasta}
			- Fastq : {input.R1} {input.R2}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["BWA"]+"\n"+config["MODULES"]["SAMTOOLS"]+"""
		readgroups="{params.rg}"
		bwa sampe -r"@RG\tID:${{readgroups}}\tSM:${{readgroups}}\tPL:Illumina" {input.fasta} {input.sai_R1} {input.sai_R2} {input.R1} {input.R2} |
		samtools view -@ {threads} -bh |
		samtools sort -@ {threads} -o {output.bam_file}
		"""

rule samtools_idxstats:
	"""apply samtools idxstats on all bam SE end PE"""
	threads: 4
	input: 	bam = out_dir+'1_mapping/paired/{references}-ref/{samples}.bam'
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog = out_dir+'LOG/1_mapping_{references}_{samples}_samtools_idxstats.e',
			outputLog = out_dir+'LOG/1_mapping_{references}_{samples}_samtools_idxstats.o'
	output: txt_file = out_dir+'1_mapping/paired/{references}-ref/{samples}_IDXSTATS.txt'
	message: """Execute samtools idxstats for
		Input:
			- BAM : {input.bam}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["SAMTOOLS"]+"""
		samtools idxstats -@ {threads} {input.bam} > {output.txt_file}
	"""

rule samtools_depth:
	"""apply samtools depth on all bam SE end PE"""
	threads: 1
	input: 	bam = out_dir+'1_mapping/paired/{references}-ref/{samples}.bam'
	params: l_mem_free='4G',
			queue="normal.q",
			errorLog = out_dir+'LOG/1_mapping_{references}_{samples}_samtools_depth.e',
			outputLog = out_dir+'LOG/1_mapping_{references}_{samples}_samtools_depth.o'
	output: txt_file = out_dir+'1_mapping/paired/{references}-ref/{samples}_DEPTH.txt'
	message: """Execute samtools depth for
		Input:
			- BAM : {input.bam}
			- Threads : {threads}"""+f"\n{sep*108}"
	shell: config["MODULES"]["SAMTOOLS"]+"""
		samtools depth {input.bam} > {output.txt_file}
	"""


rule merge_idxstats:
	"""merge all samtools idxstats files"""
	threads : 1
	input : csv_resume = expand(rules.samtools_idxstats.output[0] , samples = SAMPLES, references = REFERENCES),
	params : l_mem_free='4G',
			queue="normal.q",
			errorLog = out_dir+'LOG/2_mergeResume.e',
			outputLog = out_dir+'LOG/2_mergeResume.o'
	output :csv_resume_merge = report(out_dir+'2_merges_resume_files/all_mapping_stats_resume.csv', category="Resume mapping infos")
	message: """Execute mergeResume for all samples
		Input:
		- CSV: {input.csv_resume}
		- Threads : {threads}"""+f"\n{sep*108}"
	run :
		parse_idxstats(input.csv_resume, output.csv_resume_merge, sep="\t")


################################################################################
